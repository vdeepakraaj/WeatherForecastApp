// Manifest version information!
def versionMajor = 0
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def preDexEnabled = "true" == System.getProperty("pre-dex", "true")

android {
    compileSdkVersion compileSdk
    defaultConfig {
        applicationId "com.deepakraaj.weatherApp"

        minSdkVersion minSdk
        targetSdkVersion targetSdk

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file("../release.keystore")
            keyPassword "android"
            keyPassword "androidreleasekey"
            keyPassword "android"
        }

        debug {
            storeFile file("../debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }

    dexOptions {
        preDexLibraries = preDexEnabled
    }

    androidExtensions {
        experimental = true
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        lintConfig file('../analysis/lint/lint.xml')
        htmlOutput file("$project.buildDir/reports/lint/lint-reports.html")
        xmlOutput file("$project.buildDir/reports/lint/lint-reports.xml")
        abortOnError false
    }
    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
            multiDexEnabled true
        }
        release {
            signingConfig signingConfigs.release
        }
    }
}

// Required for annotation processing plugins like Dagger
kapt {
    generateStubs = true
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-rc1'
    implementation 'com.google.android.material:material:1.3.0-alpha02'

    // Dagger 2
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    // Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:$rxVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.4@aar'

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.google.android.material:material:1.2.0-alpha03'

    //Picasso
    implementation "com.squareup.picasso:picasso:$picassoVersion"

    // Room components
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'


    // UI Testing
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    // Unit Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'
    testImplementation 'org.mockito:mockito-core:3.3.1'
    testImplementation "org.mockito:mockito-inline:2.28.2"
    testImplementation 'android.arch.core:core-testing:1.1.1'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"
    implementation "com.facebook.stetho:stetho-urlconnection:$stethoVersion"

    implementation 'com.google.android.gms:play-services-location:17.0.0'
    androidTestImplementation "androidx.arch.core:core-testing:$coreTestingVersion"
}

